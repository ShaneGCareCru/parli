// Mocks generated by Mockito 5.4.6 from annotations
// in parli/test/services/realtime_session_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:flutter_webrtc/flutter_webrtc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:parli/services/token_service.dart' as _i2;
import 'package:parli/services/webrtc_client.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TokenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenService extends _i1.Mock implements _i2.TokenService {
  @override
  bool get hasValidToken => (super.noSuchMethod(
        Invocation.getter(#hasValidToken),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<String> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getToken,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearToken() => super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WebRTCClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebRTCClient extends _i1.Mock implements _i5.WebRTCClient {
  @override
  _i3.Stream<Map<String, dynamic>> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
        returnValueForMissingStub: _i3.Stream<Map<String, dynamic>>.empty(),
      ) as _i3.Stream<Map<String, dynamic>>);

  @override
  _i3.Stream<_i6.Uint8List> get audioData => (super.noSuchMethod(
        Invocation.getter(#audioData),
        returnValue: _i3.Stream<_i6.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i6.Uint8List>.empty(),
      ) as _i3.Stream<_i6.Uint8List>);

  @override
  _i3.Stream<_i7.RTCPeerConnectionState> get connectionState =>
      (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i3.Stream<_i7.RTCPeerConnectionState>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i7.RTCPeerConnectionState>.empty(),
      ) as _i3.Stream<_i7.RTCPeerConnectionState>);

  @override
  _i7.RTCPeerConnectionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.RTCPeerConnectionState.RTCPeerConnectionStateClosed,
        returnValueForMissingStub:
            _i7.RTCPeerConnectionState.RTCPeerConnectionStateClosed,
      ) as _i7.RTCPeerConnectionState);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<void> connect({
    required String? token,
    List<Map<String, String>>? iceServers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #token: token,
            #iceServers: iceServers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendMessage(Map<String, dynamic>? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendAudio(_i6.Uint8List? audioData) => (super.noSuchMethod(
        Invocation.method(
          #sendAudio,
          [audioData],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> startAudioCapture() => (super.noSuchMethod(
        Invocation.method(
          #startAudioCapture,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> stopAudioCapture() => (super.noSuchMethod(
        Invocation.method(
          #stopAudioCapture,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
